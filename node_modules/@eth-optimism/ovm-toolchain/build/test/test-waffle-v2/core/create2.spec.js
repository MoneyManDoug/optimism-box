"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
require("../../common/setup");
const core_utils_1 = require("@eth-optimism/core-utils");
const ethereum_waffle_v2_1 = require("ethereum-waffle-v2");
const utils_1 = require("ethers-v4/utils");
const waffle_v2_1 = require("../../../src/waffle/waffle-v2");
const SimpleCreate2 = __importStar(require("../../temp/build/waffle/SimpleCreate2.json"));
const SimpleStorage = __importStar(require("../../temp/build/waffle/SimpleStorage.json"));
const getCreate2Address = (factoryAddress, salt, bytecode) => {
    const create2Inputs = ['0xff', factoryAddress, salt, utils_1.keccak256(bytecode)];
    const sanitizedInputs = `0x${create2Inputs.map((i) => i.slice(2)).join('')}`;
    return utils_1.getAddress(`0x${utils_1.keccak256(sanitizedInputs).slice(-40)}`);
};
const DEFAULT_SALT = '0x1234123412341234123412341234123412341234123412341234123412341234';
describe('Create2 Support', () => {
    let wallet;
    let provider;
    before(async () => {
        provider = new waffle_v2_1.waffleV2.MockProvider();
        [wallet] = provider.getWallets();
    });
    let simpleCreate2;
    beforeEach(async () => {
        simpleCreate2 = await ethereum_waffle_v2_1.deployContract(wallet, SimpleCreate2, []);
    });
    it('should calculate address correctly for invalid bytecode', async () => {
        const bytecode = '0x00';
        const salt = DEFAULT_SALT;
        await simpleCreate2.create2(bytecode, salt);
        const address = await simpleCreate2.contractAddress();
        const expectedAddress = getCreate2Address(simpleCreate2.address, salt, bytecode);
        address.should.equal(expectedAddress);
    });
    it('should calculate address correctly for valid OVM bytecode', async () => {
        const bytecode = core_utils_1.add0x(SimpleStorage.bytecode);
        const salt = DEFAULT_SALT;
        await simpleCreate2.create2(bytecode, salt);
        const address = await simpleCreate2.contractAddress();
        const expectedAddress = getCreate2Address(simpleCreate2.address, salt, bytecode);
        address.should.equal(expectedAddress);
    });
});
//# sourceMappingURL=create2.spec.js.map