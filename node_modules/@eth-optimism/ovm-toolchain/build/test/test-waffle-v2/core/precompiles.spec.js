"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
require("../../common/setup");
const ethereum_waffle_v2_1 = require("ethereum-waffle-v2");
const utils_1 = require("ethers-v4/utils");
const ethereumjs_util_1 = require("ethereumjs-util");
const waffle_v2_1 = require("../../../src/waffle/waffle-v2");
const Precompiles = __importStar(require("../../temp/build/waffle/Precompiles.json"));
describe('Precompile Support', () => {
    let wallet;
    let provider;
    beforeEach(async () => {
        provider = new waffle_v2_1.waffleV2.MockProvider();
        [wallet] = provider.getWallets();
    });
    let precompiles;
    beforeEach(async () => {
        precompiles = await ethereum_waffle_v2_1.deployContract(wallet, Precompiles, []);
    });
    it('should correctly ecrecover signer address', async () => {
        const message = '0xdeadbeef';
        const hashedMessage = utils_1.keccak256(message);
        const { v, r, s } = ethereumjs_util_1.ecsign(Buffer.from(hashedMessage.slice(2), 'hex'), Buffer.from(wallet.privateKey.slice(2), 'hex'));
        const recoveredAddress = await precompiles.recoverAddr(hashedMessage, v, r, s);
        recoveredAddress.should.equal(wallet.address);
    });
    it('should correctly calculate SHA256 hash', async () => {
        const message = '0xdeadbeef';
        const expectedHash = utils_1.sha256(message);
        const hash = await precompiles.calculateSHA256(message);
        hash.should.equal(expectedHash);
    });
    it('should correctly calldataCopy', async () => {
        const message = '0xdeadbeef';
        await precompiles.calldataCopy(message);
        const copiedMessage = await precompiles.copiedData();
        copiedMessage.should.equal(message);
    });
    it('bigmodexp', async () => {
        const base = 2;
        const exp = 257;
        const mod = 13;
        const result = await precompiles.expmod(base, exp, mod);
        const expectedResult = Math.pow(base, exp) % mod;
        result.toNumber().should.equal(expectedResult);
    });
});
//# sourceMappingURL=precompiles.spec.js.map