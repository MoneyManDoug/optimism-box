"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const setup_1 = require("../../common/setup");
const ethereum_waffle_v2_1 = require("ethereum-waffle-v2");
const waffle_v2_1 = require("../../../src/waffle/waffle-v2");
const TimestampCheckerContract = __importStar(require("../../temp/build/waffle/TimestampChecker.json"));
describe('Timestamp Manipulation Support', () => {
    let provider;
    let wallet;
    let timestampChecker;
    beforeEach(async () => {
        provider = new waffle_v2_1.waffleV2.MockProvider();
        [wallet] = provider.getWallets();
        timestampChecker = await ethereum_waffle_v2_1.deployContract(wallet, TimestampCheckerContract, []);
    });
    it('should retrieve initial timestamp correctly', async () => {
        const timestamp = await timestampChecker.getTimestamp();
        setup_1.expect(timestamp.toNumber()).to.equal(0, 'Initial timestamp was not set to zero');
    });
    it('should retrieve the block timestamp correctly after modifying with evm_mine', async () => {
        const beforeTimestamp = (await timestampChecker.blockTimestamp()).toNumber();
        await provider.rpc('evm_mine', [beforeTimestamp + 10]);
        const afterTimestamp = (await timestampChecker.blockTimestamp()).toNumber();
        setup_1.expect(beforeTimestamp + 10).to.equal(afterTimestamp, 'Block timestamp was incorrect');
    });
});
//# sourceMappingURL=timestamps.spec.js.map