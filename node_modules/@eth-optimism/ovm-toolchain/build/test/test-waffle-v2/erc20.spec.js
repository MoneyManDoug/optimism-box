"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const setup_1 = require("../common/setup");
const ethereum_waffle_v2_1 = require("ethereum-waffle-v2");
const waffle_v2_1 = require("../../src/waffle/waffle-v2");
const ERC20 = __importStar(require("../temp/build/waffle/ERC20.json"));
describe('ERC20 smart contract', () => {
    let provider;
    let wallet1;
    let wallet2;
    before(async () => {
        provider = new waffle_v2_1.waffleV2.MockProvider();
        [wallet1, wallet2] = provider.getWallets();
    });
    const COIN_NAME = 'OVM Test Coin';
    const TICKER = 'OVM';
    const NUM_DECIMALS = 1;
    let ERC20Token;
    beforeEach(async () => {
        ERC20Token = await ethereum_waffle_v2_1.deployContract(wallet1, ERC20, [
            10000,
            COIN_NAME,
            NUM_DECIMALS,
            TICKER,
        ]);
    });
    it('creation: should create an initial balance of 10000 for the creator', async () => {
        const balance = await ERC20Token.balanceOf(wallet1.address);
        setup_1.expect(balance.toNumber()).to.equal(10000);
    });
    it('creation: test correct setting of vanity information', async () => {
        const name = await ERC20Token.name();
        setup_1.expect(name).to.equal(COIN_NAME);
        const decimals = await ERC20Token.decimals();
        setup_1.expect(decimals).to.equal(NUM_DECIMALS);
        const symbol = await ERC20Token.symbol();
        setup_1.expect(symbol).to.equal(TICKER);
    });
    it('transfers: should transfer 10000 to walletTo with wallet having 10000', async () => {
        await ERC20Token.transfer(wallet2.address, 10000);
        const walletToBalance = await ERC20Token.balanceOf(wallet2.address);
        const walletFromBalance = await ERC20Token.balanceOf(wallet1.address);
        setup_1.expect(walletToBalance.toNumber()).to.equal(10000);
        setup_1.expect(walletFromBalance.toNumber()).to.equal(0);
    });
});
//# sourceMappingURL=erc20.spec.js.map