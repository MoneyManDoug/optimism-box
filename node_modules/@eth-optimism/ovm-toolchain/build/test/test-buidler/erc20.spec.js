"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const setup_1 = require("../common/setup");
const { ethers } = require('@nomiclabs/buidler');
describe('ERC20 smart contract', () => {
    let wallet1;
    let wallet2;
    before(async () => {
        ;
        [wallet1, wallet2] = await ethers.getSigners();
    });
    const COIN_NAME = 'OVM Test Coin';
    const TICKER = 'OVM';
    const NUM_DECIMALS = 1;
    let ERC20Token;
    beforeEach(async () => {
        const ERC20TokenFactory = await ethers.getContractFactory('ERC20');
        ERC20Token = await ERC20TokenFactory.deploy(10000, COIN_NAME, NUM_DECIMALS, TICKER);
    });
    it('creation: should create an initial balance of 10000 for the creator', async () => {
        const balance = await ERC20Token.balanceOf(await wallet1.getAddress());
        setup_1.expect(balance.toNumber()).to.equal(10000);
    });
    it('creation: test correct setting of vanity information', async () => {
        const name = await ERC20Token.name();
        setup_1.expect(name).to.equal(COIN_NAME);
        const decimals = await ERC20Token.decimals();
        setup_1.expect(decimals).to.equal(NUM_DECIMALS);
        const symbol = await ERC20Token.symbol();
        setup_1.expect(symbol).to.equal(TICKER);
    });
    it('transfers: should transfer 10000 to walletTo with wallet having 10000', async () => {
        await ERC20Token.transfer(await wallet2.getAddress(), 10000);
        const walletToBalance = await ERC20Token.balanceOf(await wallet2.getAddress());
        const walletFromBalance = await ERC20Token.balanceOf(await wallet1.getAddress());
        setup_1.expect(walletToBalance.toNumber()).to.equal(10000);
        setup_1.expect(walletFromBalance.toNumber()).to.equal(0);
    });
});
//# sourceMappingURL=erc20.spec.js.map