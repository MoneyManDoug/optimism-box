"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const config_1 = require("@nomiclabs/buidler/config");
const compiler_1 = require("@nomiclabs/buidler/internal/solidity/compiler");
const task_names_1 = require("@nomiclabs/buidler/builtin-tasks/task-names");
const child_process_1 = require("child_process");
config_1.internalTask(task_names_1.TASK_COMPILE_RUN_COMPILER).setAction(async ({ input }, { config }) => {
    let customCompiler;
    if (fs.existsSync(config.solc.path)) {
        customCompiler = require(config.solc.path);
    }
    const compiler = new compiler_1.Compiler(customCompiler ? customCompiler.version() : config.solc.version, path.join(config.paths.cache, 'compilers'));
    if (customCompiler) {
        compiler['getSolc'] = () => {
            return customCompiler;
        };
    }
    if (config.solc.native === true) {
        console.log(`Using native solidity compiler`);
        const output = child_process_1.execSync(`solc --standard-json`, {
            input: JSON.stringify(input, undefined, 2),
            maxBuffer: 4 * 1024 * 1024,
        });
        return JSON.parse(output.toString('utf8'));
    }
    else {
        return compiler.compile(input);
    }
});
//# sourceMappingURL=buidler-ovm-compiler.js.map