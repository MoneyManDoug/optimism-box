"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const config_1 = require("@nomiclabs/buidler/config");
config_1.usePlugin('@nomiclabs/buidler-ethers');
config_1.usePlugin('@nomiclabs/buidler-waffle');
require("./src/buidler-plugins/buidler-ovm-compiler");
require("./src/buidler-plugins/buidler-ovm-node");
config_1.task('test')
    .addFlag('ovm', 'Run tests on the OVM using a custom OVM provider')
    .addFlag('native', 'Use custom native solc compiler')
    .setAction(async (taskArguments, bre, runSuper) => {
    if (taskArguments.ovm) {
        console.log('Compiling and running tests in the OVM...');
        bre.config.solc = {
            path: path_1.default.resolve(__dirname, '../../node_modules/@eth-optimism/solc'),
        };
        await bre.config.startOvmNode();
    }
    if (taskArguments.native) {
        bre.config.solc.native = true;
    }
    await runSuper(taskArguments);
});
const config = {
    networks: {
        buidlerevm: {
            blockGasLimit: 100000000,
        },
    },
    paths: {
        sources: './test/common/contracts',
        tests: './test/test-buidler',
        cache: './test/temp/build/buidler/cache',
        artifacts: './test/temp/build/buidler/artifacts',
    },
    mocha: {
        timeout: 50000,
    },
    solc: {
        version: '0.5.16',
    },
};
exports.default = config;
//# sourceMappingURL=buidler.config.js.map